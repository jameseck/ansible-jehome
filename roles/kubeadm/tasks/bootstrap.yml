---
- name: Check k8s status to determine if we need to run kubeadm
  command: "kubectl get componentstatuses"
  changed_when: False
  failed_when: False
  register: k8s_status

- name: Run kubeadm to init k8s
  command: |
    kubeadm init \
      --pod-network-cidr="{{ pod_network_cidr }}" \
      --kubernetes-version="stable-{{ kubernetes_version }}" \
      --apiserver-cert-extra-sans="{{ api_cluster_domain }},{{ ansible_default_ipv4.address }},{{ keepalived_vip | default(ansible_default_ipv4.address) }}" \
      --control-plane-endpoint="{{ api_cluster_domain }}:{{ k8s_api_port }}" \
      --apiserver-advertise-address="{{ ansible_default_ipv4.address }}" \
      {{ kubernetes_kubeadm_init_extra_opts | default("") }}
  when: k8s_status.rc != 0
#      --apiserver-advertise-address="{{ keepalived_vip | default(ansible_default_ipv4.address) }}" \

- name: Create .kube directory
  file:
    path: /root/.kube
    state: directory
    mode: 0700

- name: Copy k8s kubeconfig
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes

- name: Wait for k8s cluster to come up
  # Using curl here since the uri module requires python-httplib2 and
  # wait_for port doesn't provide health information.
  command: >
    curl --silent --tlsv1.2
    --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt
    --key /etc/kubernetes/pki/apiserver-kubelet-client.key
    --cacert /etc/kubernetes/pki/ca.crt https://{{ api_cluster_domain }}:{{ k8s_api_port }}/healthz
  args:
    # Disables the following warning:
    # Consider using get_url or uri module rather than running curl
    warn: no
  register: api_available_output
  until: api_available_output.stdout == 'ok'
  retries: 120
  delay: 1
  changed_when: False
  run_once: True

- name: include untaint.yml
  include_tasks: untaint.yml

- name: Wait for all control-plane pods become created
  shell: "kubectl get pods --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: control_plane_pods_created
  until: item in control_plane_pods_created.stdout
  retries: 10
  delay: 30
  changed_when: False
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Wait for control-plane pods become ready
  command: "kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane --timeout=600s"
  changed_when: False
  register: control_plane_pods_ready

#- name: Apply Flannel
#  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#  run_once: true
#  register: flannel_result
#  changed_when: "'created' in flannel_result.stdout"

- name: Apply weave
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  run_once: true
  register: weave_result
  changed_when: "'created' in weave_result.stdout"


